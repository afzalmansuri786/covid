{"version":3,"sources":["components/covid.js","App.js","reportWebVitals.js","index.js"],"names":["Covid","useState","data","setData","getCovidData","a","fetch","res","json","actualData","console","log","statewise","sortTable","f","n","rows","$","get","getVal","elm","v","children","eq","text","toUpperCase","isNumeric","parseInt","sort","b","A","B","each","index","row","append","f_sl","f_nm","click","this","prevAll","length","document","ready","find","css","keyup","search","val","hide","closest","show","useEffect","className","type","id","placeholder","datatype","src","map","state","confirmed","active","recovered","deaths","lastupdatedtime","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.980f4320.chunk.js","sourcesContent":["// import { cleanup } from \"@testing-library/react\";\r\nimport React,  { useEffect, useState } from \"react\";\r\n// import { Row } from \"reactstrap\";\r\nimport \"./covid.css\";\r\nimport $ from \"jquery\";\r\n\r\n\r\n\r\nconst Covid = () => {\r\n\r\n    const [data, setData] = useState([]);\r\n   \r\n\r\n    const getCovidData = async () => {\r\n        try{\r\n            const res = await fetch(\"https://data.covid19india.org/data.json\");\r\n            const actualData = await res.json();\r\n            console.log(actualData);\r\n            console.log(actualData);\r\n            console.log(actualData.statewise);\r\n            setData(actualData.statewise);\r\n        }catch(err){\r\n            console.log(\"error\");\r\n        } \r\n    }\r\n    // const no = data[1].map((x)=>{   \r\n    //     return x; \r\n    //   });\r\n    // console.log(no);\r\n    console.log(data);\r\n\r\n    // const x = () => {\r\n    //     var i;\r\n    //     for(i=0; i < data.length ;i++){\r\n    //         <tr>\r\n    //             <td>{data[i].state}</td>\r\n    //             <td>{data[i].recovered}</td>\r\n    //             <td>{data[i].deaths}</td>\r\n    //             <td>{data[i].active}</td>\r\n    //             <td>{data[i].confirmed}</td>\r\n    //         </tr>\r\n    //     }\r\n    \r\n        \r\n    // }\r\n    \r\n    \r\n      \r\n        //     for(var i=0; i<data.length ; i++){\r\n        //     console.log(data[i].lastupdatedtime);\r\n        //     <tr value={data[i].state}>\r\n        //         <td>{data[i].state}</td>\r\n        //         <td>{data[i].active}</td>\r\n        //         <td>{data[i].deaths}</td>\r\n        //         <td>{data[i].confirmed}</td>\r\n        //         <td>{data[i].lastupdatedtime}</td>;\r\n        //     </tr>;\r\n            \r\n        // }\r\n\r\n\r\n\r\n        function sortTable(f,n){\r\n            var rows = $('#mytable tbody  tr').get();\r\n        \r\n            rows.sort(function(a, b) {\r\n        \r\n                var A = getVal(a);\r\n                var B = getVal(b);\r\n                \r\n                if(A < B) {\r\n                    return -1*f;\r\n                }\r\n                if(A > B) {\r\n                    return 1*f;\r\n                }\r\n                return 0;\r\n            });\r\n        \r\n            function getVal(elm){\r\n                var v = $(elm).children('td').eq(n).text().toUpperCase();\r\n                if($.isNumeric(v)){\r\n                    v = parseInt(v,10);\r\n                }\r\n                return v;\r\n            }\r\n        \r\n            $.each(rows, function(index, row) {\r\n                $('#mytable').children('tbody').append(row);\r\n            });\r\n        }\r\n        var f_sl = 1;\r\n        var f_nm = 1;\r\n        // $(\"#nm\").click(function(){\r\n        //     f_sl *= -1;\r\n        //     var n = $(this).prevAll().length;\r\n        //     sortTable(f_sl,n);\r\n        // });\r\n        $(\"#cnf\").click(function(){\r\n            f_sl *= -1;\r\n            var n = $(this).prevAll().length;\r\n            sortTable(f_sl,n);\r\n        });\r\n        $(\"#act\").click(function(){\r\n            f_nm *= -1;\r\n            var n = $(this).prevAll().length;\r\n            sortTable(f_nm,n);\r\n        });\r\n        $(\"#rcv\").click(function(){\r\n            f_nm *= -1;\r\n            var n = $(this).prevAll().length;\r\n            sortTable(f_nm,n);\r\n        });\r\n        $(\"#dth\").click(function(){\r\n            f_nm *= -1;\r\n            var n = $(this).prevAll().length;\r\n            sortTable(f_nm,n);\r\n        });\r\n\r\n        $(document).ready(function(){\r\n            $('table tr').each(function(){\r\n                if($(this).find('td').eq(0).text() === 'State Unassigned'){\r\n                    $(this).css('display','none');\r\n                }\r\n            });\r\n        });\r\n        // $('table').sortable({items: 'tr:not(:first)'});\r\n\r\n        $('#txt_searchall').keyup(function(){\r\n            // Search Text\r\n            var search = $(this).val();\r\n        \r\n            // Hide all table tbody rows\r\n            $('table tbody tr').hide();\r\n        \r\n            // Count total search result\r\n            var len = $('table tbody tr:not(.notfound) td:contains(\"'+search+'\")').length;\r\n        \r\n            if(len > 0){\r\n              // Searching text in columns and show match row\r\n              $('table tbody tr:not(.notfound) td:contains(\"'+search+'\")').each(function(){\r\n                $(this).closest('tr').show();\r\n              });\r\n            }else{\r\n              $('.notfound').show();\r\n            }\r\n        \r\n          });\r\n\r\n        \r\n    \r\n \r\n\r\n    useEffect(() => {\r\n        getCovidData();\r\n    }, []);\r\n\r\n  return (\r\n\r\n    <>\r\n        {/* <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/> */}\r\n        <section>\r\n            <h1 className=\"blinker\">ðŸ”´Live</h1>\r\n            <h2>Covid-19 LiveTracker </h2>\r\n        </section>\r\n        <div>\r\n        <input type='text' id='txt_searchall' placeholder='Enter search text'></input>\r\n            <table id=\"mytable\">\r\n            \r\n                <tbody>\r\n                \r\n                <tr>\r\n                    {/* <img src=\"https://img.icons8.com/material-outlined/24/000000/sort.png\"/> */}\r\n                    <td id=\"nm\" datatype=\"string\">StateName</td>\r\n                    <td id=\"cnf\" data-type=\"number\">Confirmed<img src=\"https://img.icons8.com/material-outlined/24/000000/sort.png\"/></td>\r\n                    <td id=\"act\" data-type=\"number\">Active<img src=\"https://img.icons8.com/material-outlined/24/000000/sort.png\"/></td>\r\n                    <td id=\"rcv\" data-type=\"number\">Recovered<img src=\"https://img.icons8.com/material-outlined/24/000000/sort.png\"/></td>\r\n                    <td id=\"dth\" data-type=\"number\">Deaths<img src=\"https://img.icons8.com/material-outlined/24/000000/sort.png\"/></td>\r\n                    <th>LastUpdated</th>\r\n                </tr>\r\n                \r\n                \r\n                \r\n                {\r\n                    data.map(data => (\r\n                    <tr>\r\n                        <td key={data.id}>{data.state}</td>\r\n                        <td key={data.id}>{data.confirmed}</td>\r\n                        <td key={data.id}>{data.active}</td>\r\n                        <td key={data.id}>{data.recovered}</td>\r\n                        <td key={data.id}>{data.deaths}</td>\r\n                        <td key={data.id}>{data.lastupdatedtime}</td>\r\n                    </tr>\r\n                    ))\r\n                }\r\n                </tbody>\r\n\r\n            </table>\r\n        \r\n            </div>\r\n            {/* <div id=\"fx\">\r\n                    <ul>\r\n                        <li>StateName</li>\r\n                        <li>TotalRecovered</li>\r\n                        <li>TotalConfirmed</li>\r\n                        <li>TotalDeaths</li>\r\n                        <li>TotalActive</li>\r\n                        <li>LastUpdateTime</li>\r\n                    </ul>\r\n            </div> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Covid;\r\n","import React from \"react\";\nimport Covid from \"./components/covid\";\nfunction App() {\n  return (\n    <>\n      <Covid />     \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}